package com.dao;

import com.model.SysArea;
import com.model.SysAreaCriteria.Criteria;
import com.model.SysAreaCriteria.Criterion;
import com.model.SysAreaCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class SysAreaSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_area
     * @mbg.generated
     */
    public String countByExample(SysAreaCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("sys_area");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_area
     * @mbg.generated
     */
    public String deleteByExample(SysAreaCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("sys_area");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_area
     * @mbg.generated
     */
    public String insertSelective(SysArea record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("sys_area");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=VARCHAR}");
        }
        
        if (record.getAreaName() != null) {
            sql.VALUES("area_name", "#{areaName,jdbcType=VARCHAR}");
        }
        
        if (record.getFatherId() != null) {
            sql.VALUES("father_id", "#{fatherId,jdbcType=VARCHAR}");
        }
        
        if (record.getAreaShortname() != null) {
            sql.VALUES("area_shortname", "#{areaShortname,jdbcType=VARCHAR}");
        }
        
        if (record.getAreaFullname() != null) {
            sql.VALUES("area_fullname", "#{areaFullname,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.VALUES("`status`", "#{status,jdbcType=TINYINT}");
        }
        
        if (record.getUpdDatetime() != null) {
            sql.VALUES("upd_datetime", "#{updDatetime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdUser() != null) {
            sql.VALUES("upd_user", "#{updUser,jdbcType=VARCHAR}");
        }
        
        if (record.getSortId() != null) {
            sql.VALUES("sort_id", "#{sortId,jdbcType=INTEGER}");
        }
        
        if (record.getMaxDelnumCounty() != null) {
            sql.VALUES("max_delnum_county", "#{maxDelnumCounty,jdbcType=TINYINT}");
        }
        
        if (record.getMaxDelnumBase() != null) {
            sql.VALUES("max_delnum_base", "#{maxDelnumBase,jdbcType=TINYINT}");
        }
        
        if (record.getTestBlob() != null) {
            sql.VALUES("test_blob", "#{testBlob,jdbcType=VARCHAR}");
        }
        
        if (record.getTestBoolean() != null) {
            sql.VALUES("test_boolean", "#{testBoolean,jdbcType=BIT}");
        }
        
        if (record.getTestClob() != null) {
            sql.VALUES("test_clob", "#{testClob,jdbcType=VARCHAR}");
        }
        
        if (record.getAddUserId() != null) {
            sql.VALUES("add_user_id", "#{addUserId,jdbcType=VARCHAR}");
        }
        
        if (record.getAddUser() != null) {
            sql.VALUES("add_user", "#{addUser,jdbcType=VARCHAR}");
        }
        
        if (record.getAddDttm() != null) {
            sql.VALUES("add_dttm", "#{addDttm,jdbcType=DATE}");
        }
        
        if (record.getLastUpdUserId() != null) {
            sql.VALUES("last_upd_user_id", "#{lastUpdUserId,jdbcType=VARCHAR}");
        }
        
        if (record.getLastUpdUser() != null) {
            sql.VALUES("last_upd_user", "#{lastUpdUser,jdbcType=VARCHAR}");
        }
        
        if (record.getLastUpdDttm() != null) {
            sql.VALUES("last_upd_dttm", "#{lastUpdDttm,jdbcType=DATE}");
        }
        
        if (record.getEnable() != null) {
            sql.VALUES("`enable`", "#{enable,jdbcType=BIT}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_area
     * @mbg.generated
     */
    public String selectByExample(SysAreaCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("area_name");
        sql.SELECT("father_id");
        sql.SELECT("area_shortname");
        sql.SELECT("area_fullname");
        sql.SELECT("`status`");
        sql.SELECT("upd_datetime");
        sql.SELECT("upd_user");
        sql.SELECT("sort_id");
        sql.SELECT("max_delnum_county");
        sql.SELECT("max_delnum_base");
        sql.SELECT("test_blob");
        sql.SELECT("test_boolean");
        sql.SELECT("test_clob");
        sql.SELECT("add_user_id");
        sql.SELECT("add_user");
        sql.SELECT("add_dttm");
        sql.SELECT("last_upd_user_id");
        sql.SELECT("last_upd_user");
        sql.SELECT("last_upd_dttm");
        sql.SELECT("`enable`");
        sql.FROM("sys_area");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_area
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        SysArea record = (SysArea) parameter.get("record");
        SysAreaCriteria example = (SysAreaCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("sys_area");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=VARCHAR}");
        }
        
        if (record.getAreaName() != null) {
            sql.SET("area_name = #{record.areaName,jdbcType=VARCHAR}");
        }
        
        if (record.getFatherId() != null) {
            sql.SET("father_id = #{record.fatherId,jdbcType=VARCHAR}");
        }
        
        if (record.getAreaShortname() != null) {
            sql.SET("area_shortname = #{record.areaShortname,jdbcType=VARCHAR}");
        }
        
        if (record.getAreaFullname() != null) {
            sql.SET("area_fullname = #{record.areaFullname,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("`status` = #{record.status,jdbcType=TINYINT}");
        }
        
        if (record.getUpdDatetime() != null) {
            sql.SET("upd_datetime = #{record.updDatetime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdUser() != null) {
            sql.SET("upd_user = #{record.updUser,jdbcType=VARCHAR}");
        }
        
        if (record.getSortId() != null) {
            sql.SET("sort_id = #{record.sortId,jdbcType=INTEGER}");
        }
        
        if (record.getMaxDelnumCounty() != null) {
            sql.SET("max_delnum_county = #{record.maxDelnumCounty,jdbcType=TINYINT}");
        }
        
        if (record.getMaxDelnumBase() != null) {
            sql.SET("max_delnum_base = #{record.maxDelnumBase,jdbcType=TINYINT}");
        }
        
        if (record.getTestBlob() != null) {
            sql.SET("test_blob = #{record.testBlob,jdbcType=VARCHAR}");
        }
        
        if (record.getTestBoolean() != null) {
            sql.SET("test_boolean = #{record.testBoolean,jdbcType=BIT}");
        }
        
        if (record.getTestClob() != null) {
            sql.SET("test_clob = #{record.testClob,jdbcType=VARCHAR}");
        }
        
        if (record.getAddUserId() != null) {
            sql.SET("add_user_id = #{record.addUserId,jdbcType=VARCHAR}");
        }
        
        if (record.getAddUser() != null) {
            sql.SET("add_user = #{record.addUser,jdbcType=VARCHAR}");
        }
        
        if (record.getAddDttm() != null) {
            sql.SET("add_dttm = #{record.addDttm,jdbcType=DATE}");
        }
        
        if (record.getLastUpdUserId() != null) {
            sql.SET("last_upd_user_id = #{record.lastUpdUserId,jdbcType=VARCHAR}");
        }
        
        if (record.getLastUpdUser() != null) {
            sql.SET("last_upd_user = #{record.lastUpdUser,jdbcType=VARCHAR}");
        }
        
        if (record.getLastUpdDttm() != null) {
            sql.SET("last_upd_dttm = #{record.lastUpdDttm,jdbcType=DATE}");
        }
        
        if (record.getEnable() != null) {
            sql.SET("`enable` = #{record.enable,jdbcType=BIT}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_area
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("sys_area");
        
        sql.SET("id = #{record.id,jdbcType=VARCHAR}");
        sql.SET("area_name = #{record.areaName,jdbcType=VARCHAR}");
        sql.SET("father_id = #{record.fatherId,jdbcType=VARCHAR}");
        sql.SET("area_shortname = #{record.areaShortname,jdbcType=VARCHAR}");
        sql.SET("area_fullname = #{record.areaFullname,jdbcType=VARCHAR}");
        sql.SET("`status` = #{record.status,jdbcType=TINYINT}");
        sql.SET("upd_datetime = #{record.updDatetime,jdbcType=TIMESTAMP}");
        sql.SET("upd_user = #{record.updUser,jdbcType=VARCHAR}");
        sql.SET("sort_id = #{record.sortId,jdbcType=INTEGER}");
        sql.SET("max_delnum_county = #{record.maxDelnumCounty,jdbcType=TINYINT}");
        sql.SET("max_delnum_base = #{record.maxDelnumBase,jdbcType=TINYINT}");
        sql.SET("test_blob = #{record.testBlob,jdbcType=VARCHAR}");
        sql.SET("test_boolean = #{record.testBoolean,jdbcType=BIT}");
        sql.SET("test_clob = #{record.testClob,jdbcType=VARCHAR}");
        sql.SET("add_user_id = #{record.addUserId,jdbcType=VARCHAR}");
        sql.SET("add_user = #{record.addUser,jdbcType=VARCHAR}");
        sql.SET("add_dttm = #{record.addDttm,jdbcType=DATE}");
        sql.SET("last_upd_user_id = #{record.lastUpdUserId,jdbcType=VARCHAR}");
        sql.SET("last_upd_user = #{record.lastUpdUser,jdbcType=VARCHAR}");
        sql.SET("last_upd_dttm = #{record.lastUpdDttm,jdbcType=DATE}");
        sql.SET("`enable` = #{record.enable,jdbcType=BIT}");
        
        SysAreaCriteria example = (SysAreaCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_area
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, SysAreaCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}